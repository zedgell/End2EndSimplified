package End2EndSimplified.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Action;
  private ConceptPresentation props_Canvas;
  private ConceptPresentation props_Click;
  private ConceptPresentation props_ClickRefernce;
  private ConceptPresentation props_Wait;
  private ConceptPresentation props_clickButtons;
  private ConceptPresentation props_screenshot;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Action:
        if (props_Action == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Action = cpb.create();
        }
        return props_Action;
      case LanguageConceptSwitch.Canvas:
        if (props_Canvas == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Canvas = cpb.create();
        }
        return props_Canvas;
      case LanguageConceptSwitch.Click:
        if (props_Click == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("click");
          props_Click = cpb.create();
        }
        return props_Click;
      case LanguageConceptSwitch.ClickRefernce:
        if (props_ClickRefernce == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ClickRefernce = cpb.create();
        }
        return props_ClickRefernce;
      case LanguageConceptSwitch.Wait:
        if (props_Wait == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("wait");
          props_Wait = cpb.create();
        }
        return props_Wait;
      case LanguageConceptSwitch.clickButtons:
        if (props_clickButtons == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_clickButtons = cpb.create();
        }
        return props_clickButtons;
      case LanguageConceptSwitch.screenshot:
        if (props_screenshot == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("screenshot");
          props_screenshot = cpb.create();
        }
        return props_screenshot;
    }
    return null;
  }
}
